{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SVCET LAB\\\\Pictures\\\\React1\\\\frontendreact\\\\src\\\\Board.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Square from './Square';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Board = () => {\n  _s();\n  const [squares, setSquares] = useState(Array(9).fill(null)); // Array to store values of the 9 squares\n  const [isXNext, setIsXNext] = useState(true); // To track whose turn it is (X or O)\n  const [winner, setWinner] = useState(null); // To store the winner\n\n  // Function to handle square click\n  const handleClick = index => {\n    if (squares[index] || winner) return; // If the square is already filled or a winner is determined, do nothing\n\n    const newSquares = squares.slice(); // Copy of the squares array\n    newSquares[index] = isXNext ? 'X' : 'O'; // Place X or O in the clicked square\n    setSquares(newSquares);\n    setIsXNext(!isXNext); // Switch turns\n\n    // Check if there's a winner\n    checkWinner(newSquares);\n  };\n\n  // Function to check if there is a winner\n  const checkWinner = squares => {\n    const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8],\n    // Horizontal lines\n    [0, 3, 6], [1, 4, 7], [2, 5, 8],\n    // Vertical lines\n    [0, 4, 8], [2, 4, 6] // Diagonal lines\n    ];\n    for (let i = 0; i < lines.length; i++) {\n      const [a, b, c] = lines[i];\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n        setWinner(squares[a]); // Set winner (X or O)\n        return;\n      }\n    }\n  };\n\n  // Function to reset the game\n  const resetGame = () => {\n    setSquares(Array(9).fill(null));\n    setWinner(null);\n    setIsXNext(true);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status\",\n      children: winner ? `Winner: ${winner}` : `Next player: ${isXNext ? 'X' : 'O'}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-grid\",\n      children: squares.map((value, index) => /*#__PURE__*/_jsxDEV(Square, {\n        value: value,\n        onClick: () => handleClick(index)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"reset-button\",\n      onClick: resetGame,\n      children: \"Reset\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s(Board, \"jS5RNCf5ReYqUdAUw/3MoB90dh0=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","Square","jsxDEV","_jsxDEV","Board","_s","squares","setSquares","Array","fill","isXNext","setIsXNext","winner","setWinner","handleClick","index","newSquares","slice","checkWinner","lines","i","length","a","b","c","resetGame","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","value","onClick","_c","$RefreshReg$"],"sources":["C:/Users/SVCET LAB/Pictures/React1/frontendreact/src/Board.jsx"],"sourcesContent":["\r\nimport React, { useState } from 'react';\r\nimport Square from './Square';\r\n\r\nconst Board = () => {\r\n  const [squares, setSquares] = useState(Array(9).fill(null)); // Array to store values of the 9 squares\r\n  const [isXNext, setIsXNext] = useState(true); // To track whose turn it is (X or O)\r\n  const [winner, setWinner] = useState(null); // To store the winner\r\n  \r\n  // Function to handle square click\r\n  const handleClick = (index) => {\r\n    if (squares[index] || winner) return; // If the square is already filled or a winner is determined, do nothing\r\n\r\n    const newSquares = squares.slice(); // Copy of the squares array\r\n    newSquares[index] = isXNext ? 'X' : 'O'; // Place X or O in the clicked square\r\n    setSquares(newSquares);\r\n    setIsXNext(!isXNext); // Switch turns\r\n\r\n    // Check if there's a winner\r\n    checkWinner(newSquares);\r\n  };\r\n\r\n  // Function to check if there is a winner\r\n  const checkWinner = (squares) => {\r\n    const lines = [\r\n      [0, 1, 2], [3, 4, 5], [6, 7, 8], // Horizontal lines\r\n      [0, 3, 6], [1, 4, 7], [2, 5, 8], // Vertical lines\r\n      [0, 4, 8], [2, 4, 6]  // Diagonal lines\r\n    ];\r\n\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const [a, b, c] = lines[i];\r\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n        setWinner(squares[a]); // Set winner (X or O)\r\n        return;\r\n      }\r\n    }\r\n  };\r\n\r\n  // Function to reset the game\r\n  const resetGame = () => {\r\n    setSquares(Array(9).fill(null));\r\n    setWinner(null);\r\n    setIsXNext(true);\r\n  };\r\n\r\n  return (\r\n    <div className=\"board\">\r\n      <div className=\"status\">\r\n        {winner ? `Winner: ${winner}` : `Next player: ${isXNext ? 'X' : 'O'}`}\r\n      </div>\r\n      <div className=\"board-grid\">\r\n        {squares.map((value, index) => (\r\n          <Square key={index} value={value} onClick={() => handleClick(index)} />\r\n        ))}\r\n      </div>\r\n      <button className=\"reset-button\" onClick={resetGame}>Reset</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}